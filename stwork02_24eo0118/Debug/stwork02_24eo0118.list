
stwork02_24eo0118.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c50  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e34  08001e34  00002e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e58  08001e58  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e58  08001e58  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e58  08001e58  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e58  08001e58  00002e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e5c  08001e5c  00002e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e60  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08001e6c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001e6c  000030ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b51  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001863  00000000  00000000  0000bb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0000d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  0000de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019227  00000000  00000000  0000e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b89d  00000000  00000000  00027877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982a8  00000000  00000000  00033114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb3bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aac  00000000  00000000  000cb400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000cdeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001e1c 	.word	0x08001e1c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001e1c 	.word	0x08001e1c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fabc 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f824 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f92a 	bl	8000488 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000234:	f000 f87e 	bl	8000334 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000238:	f000 f8ba 	bl	80003b0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800023c:	f000 f8ee 	bl	800041c <MX_TIM7_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //PORTBの名前がGPIOB
	  GPIOB->ODR = 0xAA00;
 8000240:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <main+0x50>)
 8000242:	f44f 422a 	mov.w	r2, #43520	@ 0xaa00
 8000246:	60da      	str	r2, [r3, #12]
	  HAL_Delay(2000); //ウェイト 引数はms
 8000248:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800024c:	f000 fb0c 	bl	8000868 <HAL_Delay>
	  GPIOB->ODR = 0xD600;
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <main+0x50>)
 8000252:	f44f 4256 	mov.w	r2, #54784	@ 0xd600
 8000256:	60da      	str	r2, [r3, #12]
	  HAL_Delay(2000);
 8000258:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800025c:	f000 fb04 	bl	8000868 <HAL_Delay>
	  GPIOB->ODR = 0x2400;
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <main+0x50>)
 8000262:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 8000266:	60da      	str	r2, [r3, #12]
	  HAL_Delay(2000);
 8000268:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800026c:	f000 fafc 	bl	8000868 <HAL_Delay>
	  GPIOB->ODR = 0xAA00;
 8000270:	bf00      	nop
 8000272:	e7e5      	b.n	8000240 <main+0x1c>
 8000274:	40010c00 	.word	0x40010c00

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	@ 0x58
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000282:	2228      	movs	r2, #40	@ 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fd9c 	bl	8001dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ac:	2301      	movs	r3, #1
 80002ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 ffa0 	bl	8001218 <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002de:	f000 f963 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2302      	movs	r3, #2
 80002e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f8:	f107 031c 	add.w	r3, r7, #28
 80002fc:	2102      	movs	r1, #2
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fa0c 	bl	800171c <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030a:	f000 f94d 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800030e:	2302      	movs	r3, #2
 8000310:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000316:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f001 fb5a 	bl	80019d4 <HAL_RCCEx_PeriphCLKConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000326:	f000 f93f 	bl	80005a8 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3758      	adds	r7, #88	@ 0x58
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000344:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000346:	4a19      	ldr	r2, [pc, #100]	@ (80003ac <MX_ADC1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_ADC1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <MX_ADC1_Init+0x74>)
 800035e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000362:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000364:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <MX_ADC1_Init+0x74>)
 800036c:	2201      	movs	r2, #1
 800036e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000372:	f000 fa9d 	bl	80008b0 <HAL_ADC_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800037c:	f000 f914 	bl	80005a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000384:	2301      	movs	r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <MX_ADC1_Init+0x74>)
 8000392:	f000 fb77 	bl	8000a84 <HAL_ADC_ConfigChannel>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800039c:	f000 f904 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000028 	.word	0x20000028
 80003ac:	40012400 	.word	0x40012400

080003b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b6:	463b      	mov	r3, r7
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_TIM6_Init+0x64>)
 80003c0:	4a15      	ldr	r2, [pc, #84]	@ (8000418 <MX_TIM6_Init+0x68>)
 80003c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <MX_TIM6_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_TIM6_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80003d0:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <MX_TIM6_Init+0x64>)
 80003d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <MX_TIM6_Init+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003de:	480d      	ldr	r0, [pc, #52]	@ (8000414 <MX_TIM6_Init+0x64>)
 80003e0:	f001 fbae 	bl	8001b40 <HAL_TIM_Base_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80003ea:	f000 f8dd 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ee:	2300      	movs	r3, #0
 80003f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003f6:	463b      	mov	r3, r7
 80003f8:	4619      	mov	r1, r3
 80003fa:	4806      	ldr	r0, [pc, #24]	@ (8000414 <MX_TIM6_Init+0x64>)
 80003fc:	f001 fc76 	bl	8001cec <HAL_TIMEx_MasterConfigSynchronization>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000406:	f000 f8cf 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000058 	.word	0x20000058
 8000418:	40001000 	.word	0x40001000

0800041c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000422:	463b      	mov	r3, r7
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <MX_TIM7_Init+0x64>)
 800042c:	4a15      	ldr	r2, [pc, #84]	@ (8000484 <MX_TIM7_Init+0x68>)
 800042e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000430:	4b13      	ldr	r3, [pc, #76]	@ (8000480 <MX_TIM7_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <MX_TIM7_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800043c:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <MX_TIM7_Init+0x64>)
 800043e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000442:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000444:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <MX_TIM7_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800044a:	480d      	ldr	r0, [pc, #52]	@ (8000480 <MX_TIM7_Init+0x64>)
 800044c:	f001 fb78 	bl	8001b40 <HAL_TIM_Base_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000456:	f000 f8a7 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000462:	463b      	mov	r3, r7
 8000464:	4619      	mov	r1, r3
 8000466:	4806      	ldr	r0, [pc, #24]	@ (8000480 <MX_TIM7_Init+0x64>)
 8000468:	f001 fc40 	bl	8001cec <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000472:	f000 f899 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000a0 	.word	0x200000a0
 8000484:	40001400 	.word	0x40001400

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	4b3e      	ldr	r3, [pc, #248]	@ (8000598 <MX_GPIO_Init+0x110>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0310 	and.w	r3, r3, #16
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	4b38      	ldr	r3, [pc, #224]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a37      	ldr	r2, [pc, #220]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b35      	ldr	r3, [pc, #212]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0320 	and.w	r3, r3, #32
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b32      	ldr	r3, [pc, #200]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a31      	ldr	r2, [pc, #196]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <MX_GPIO_Init+0x110>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0308 	and.w	r3, r3, #8
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin|Busser_Pin
 80004fc:	2200      	movs	r2, #0
 80004fe:	f24f 71f0 	movw	r1, #63472	@ 0xf7f0
 8000502:	4826      	ldr	r0, [pc, #152]	@ (800059c <MX_GPIO_Init+0x114>)
 8000504:	f000 fe70 	bl	80011e8 <HAL_GPIO_WritePin>
                          |LED9_CLK_Pin|LED9_DATA_Pin|LED9_SCAN_Pin|LCD_RS_Pin
                          |LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800050e:	4824      	ldr	r0, [pc, #144]	@ (80005a0 <MX_GPIO_Init+0x118>)
 8000510:	f000 fe6a 	bl	80011e8 <HAL_GPIO_WritePin>
                          |LED7_Pin|LED8_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2104      	movs	r1, #4
 8000518:	4822      	ldr	r0, [pc, #136]	@ (80005a4 <MX_GPIO_Init+0x11c>)
 800051a:	f000 fe65 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin Busser_Pin
                           LED9_CLK_Pin LED9_DATA_Pin LED9_SCAN_Pin LCD_RS_Pin
                           LCD_RW_Pin LCD_E_Pin LCD_DB4_Pin */
  GPIO_InitStruct.Pin = LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin|Busser_Pin
 800051e:	f24f 73f0 	movw	r3, #63472	@ 0xf7f0
 8000522:	613b      	str	r3, [r7, #16]
                          |LED9_CLK_Pin|LED9_DATA_Pin|LED9_SCAN_Pin|LCD_RS_Pin
                          |LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2302      	movs	r3, #2
 800052e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4819      	ldr	r0, [pc, #100]	@ (800059c <MX_GPIO_Init+0x114>)
 8000538:	f000 fcc2 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin SW6_Pin SW7_Pin SW8_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 800053c:	23ff      	movs	r3, #255	@ 0xff
 800053e:	613b      	str	r3, [r7, #16]
                          |SW5_Pin|SW6_Pin|SW7_Pin|SW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4814      	ldr	r0, [pc, #80]	@ (80005a0 <MX_GPIO_Init+0x118>)
 8000550:	f000 fcb6 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin LED6_Pin
                           LED7_Pin LED8_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 8000554:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000558:	613b      	str	r3, [r7, #16]
                          |LED7_Pin|LED8_Pin|LED1_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2302      	movs	r3, #2
 8000564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4619      	mov	r1, r3
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <MX_GPIO_Init+0x118>)
 800056e:	f000 fca7 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000572:	2304      	movs	r3, #4
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2302      	movs	r3, #2
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	4619      	mov	r1, r3
 8000588:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <MX_GPIO_Init+0x11c>)
 800058a:	f000 fc99 	bl	8000ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058e:	bf00      	nop
 8000590:	3720      	adds	r7, #32
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	40011000 	.word	0x40011000
 80005a0:	40010c00 	.word	0x40010c00
 80005a4:	40011400 	.word	0x40011400

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <Error_Handler+0x8>

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a14      	ldr	r2, [pc, #80]	@ (8000610 <HAL_MspInit+0x5c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <HAL_MspInit+0x5c>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <HAL_MspInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <HAL_MspInit+0x60>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	40010000 	.word	0x40010000

08000618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <HAL_ADC_MspInit+0x6c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d121      	bne.n	800067c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <HAL_ADC_MspInit+0x70>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_ADC_MspInit+0x70>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <HAL_ADC_MspInit+0x70>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <HAL_ADC_MspInit+0x70>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a0c      	ldr	r2, [pc, #48]	@ (8000688 <HAL_ADC_MspInit+0x70>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <HAL_ADC_MspInit+0x70>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000668:	2307      	movs	r3, #7
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066c:	2303      	movs	r3, #3
 800066e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <HAL_ADC_MspInit+0x74>)
 8000678:	f000 fc22 	bl	8000ec0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40012400 	.word	0x40012400
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800

08000690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <HAL_TIM_Base_MspInit+0x58>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d10c      	bne.n	80006bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <HAL_TIM_Base_MspInit+0x5c>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a11      	ldr	r2, [pc, #68]	@ (80006ec <HAL_TIM_Base_MspInit+0x5c>)
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <HAL_TIM_Base_MspInit+0x5c>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80006ba:	e010      	b.n	80006de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <HAL_TIM_Base_MspInit+0x60>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d10b      	bne.n	80006de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <HAL_TIM_Base_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <HAL_TIM_Base_MspInit+0x5c>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_TIM_Base_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 0320 	and.w	r3, r3, #32
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40001000 	.word	0x40001000
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40001400 	.word	0x40001400

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <NMI_Handler+0x4>

080006fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <MemManage_Handler+0x4>

0800070c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <UsageFault_Handler+0x4>

0800071c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f874 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff fff8 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480b      	ldr	r0, [pc, #44]	@ (800078c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800075e:	490c      	ldr	r1, [pc, #48]	@ (8000790 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000760:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a09      	ldr	r2, [pc, #36]	@ (8000798 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000774:	4c09      	ldr	r4, [pc, #36]	@ (800079c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f001 fb27 	bl	8001dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fd4d 	bl	8000224 <main>
  bx lr
 800078a:	4770      	bx	lr
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000794:	08001e60 	.word	0x08001e60
  ldr r2, =_sbss
 8000798:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800079c:	200000ec 	.word	0x200000ec

080007a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_2_IRQHandler>
	...

080007a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <HAL_Init+0x28>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	@ (80007cc <HAL_Init+0x28>)
 80007ae:	f043 0310 	orr.w	r3, r3, #16
 80007b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 fb4f 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f808 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c0:	f7ff fef8 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <HAL_InitTick+0x54>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_InitTick+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fb59 	bl	8000ea6 <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 fb2f 	bl	8000e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	@ (800082c <HAL_InitTick+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a03      	ldr	r2, [pc, #12]	@ (8000850 <HAL_IncTick+0x20>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000008 	.word	0x20000008
 8000850:	200000e8 	.word	0x200000e8

08000854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	200000e8 	.word	0x200000e8

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff fff0 	bl	8000854 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffe0 	bl	8000854 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008

080008b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e0ce      	b.n	8000a70 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d109      	bne.n	80008f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fe92 	bl	8000618 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f9bd 	bl	8000c74 <ADC_ConversionStop_Disable>
 80008fa:	4603      	mov	r3, r0
 80008fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 80a9 	bne.w	8000a5e <HAL_ADC_Init+0x1ae>
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 80a5 	bne.w	8000a5e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000918:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800091c:	f023 0302 	bic.w	r3, r3, #2
 8000920:	f043 0202 	orr.w	r2, r3, #2
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4951      	ldr	r1, [pc, #324]	@ (8000a78 <HAL_ADC_Init+0x1c8>)
 8000932:	428b      	cmp	r3, r1
 8000934:	d10a      	bne.n	800094c <HAL_ADC_Init+0x9c>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800093e:	d002      	beq.n	8000946 <HAL_ADC_Init+0x96>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	e004      	b.n	8000950 <HAL_ADC_Init+0xa0>
 8000946:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800094a:	e001      	b.n	8000950 <HAL_ADC_Init+0xa0>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000950:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7b1b      	ldrb	r3, [r3, #12]
 8000956:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000958:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	4313      	orrs	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000968:	d003      	beq.n	8000972 <HAL_ADC_Init+0xc2>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <HAL_ADC_Init+0xc8>
 8000972:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000976:	e000      	b.n	800097a <HAL_ADC_Init+0xca>
 8000978:	2300      	movs	r3, #0
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7d1b      	ldrb	r3, [r3, #20]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d119      	bne.n	80009bc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7b1b      	ldrb	r3, [r3, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d109      	bne.n	80009a4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	3b01      	subs	r3, #1
 8000996:	035a      	lsls	r2, r3, #13
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	e00b      	b.n	80009bc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a8:	f043 0220 	orr.w	r2, r3, #32
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b4:	f043 0201 	orr.w	r2, r3, #1
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <HAL_ADC_Init+0x1cc>)
 80009d8:	4013      	ands	r3, r2
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	68b9      	ldr	r1, [r7, #8]
 80009e0:	430b      	orrs	r3, r1
 80009e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009ec:	d003      	beq.n	80009f6 <HAL_ADC_Init+0x146>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	051b      	lsls	r3, r3, #20
 80009fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a06:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	430a      	orrs	r2, r1
 8000a12:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <HAL_ADC_Init+0x1d0>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d10b      	bne.n	8000a3c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a2e:	f023 0303 	bic.w	r3, r3, #3
 8000a32:	f043 0201 	orr.w	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a3a:	e018      	b.n	8000a6e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a40:	f023 0312 	bic.w	r3, r3, #18
 8000a44:	f043 0210 	orr.w	r2, r3, #16
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a5c:	e007      	b.n	8000a6e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a62:	f043 0210 	orr.w	r2, r3, #16
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40013c00 	.word	0x40013c00
 8000a7c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a80:	ff1f0efe 	.word	0xff1f0efe

08000a84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d101      	bne.n	8000aa4 <HAL_ADC_ConfigChannel+0x20>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e0dc      	b.n	8000c5e <HAL_ADC_ConfigChannel+0x1da>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b06      	cmp	r3, #6
 8000ab2:	d81c      	bhi.n	8000aee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	3b05      	subs	r3, #5
 8000ac6:	221f      	movs	r2, #31
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	4019      	ands	r1, r3
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	3b05      	subs	r3, #5
 8000ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aec:	e03c      	b.n	8000b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b0c      	cmp	r3, #12
 8000af4:	d81c      	bhi.n	8000b30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	3b23      	subs	r3, #35	@ 0x23
 8000b08:	221f      	movs	r2, #31
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	4019      	ands	r1, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	3b23      	subs	r3, #35	@ 0x23
 8000b22:	fa00 f203 	lsl.w	r2, r0, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b2e:	e01b      	b.n	8000b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	3b41      	subs	r3, #65	@ 0x41
 8000b42:	221f      	movs	r2, #31
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4019      	ands	r1, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	3b41      	subs	r3, #65	@ 0x41
 8000b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b09      	cmp	r3, #9
 8000b6e:	d91c      	bls.n	8000baa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68d9      	ldr	r1, [r3, #12]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	3b1e      	subs	r3, #30
 8000b82:	2207      	movs	r2, #7
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	4019      	ands	r1, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	6898      	ldr	r0, [r3, #8]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	3b1e      	subs	r3, #30
 8000b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	e019      	b.n	8000bde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6919      	ldr	r1, [r3, #16]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	2207      	movs	r2, #7
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4019      	ands	r1, r3
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	6898      	ldr	r0, [r3, #8]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b10      	cmp	r3, #16
 8000be4:	d003      	beq.n	8000bee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bea:	2b11      	cmp	r3, #17
 8000bec:	d132      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <HAL_ADC_ConfigChannel+0x1e4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d125      	bne.n	8000c44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d126      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000c14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b10      	cmp	r3, #16
 8000c1c:	d11a      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	0c9a      	lsrs	r2, r3, #18
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c34:	e002      	b.n	8000c3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f9      	bne.n	8000c36 <HAL_ADC_ConfigChannel+0x1b2>
 8000c42:	e007      	b.n	8000c54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f043 0220 	orr.w	r2, r3, #32
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40012400 	.word	0x40012400
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	431bde83 	.word	0x431bde83

08000c74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d12e      	bne.n	8000cec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0201 	bic.w	r2, r2, #1
 8000c9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c9e:	f7ff fdd9 	bl	8000854 <HAL_GetTick>
 8000ca2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ca4:	e01b      	b.n	8000cde <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ca6:	f7ff fdd5 	bl	8000854 <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d914      	bls.n	8000cde <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10d      	bne.n	8000cde <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f043 0210 	orr.w	r2, r3, #16
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e007      	b.n	8000cee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d0dc      	beq.n	8000ca6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff90 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff49 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff5e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffb0 	bl	8000e14 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b08b      	sub	sp, #44	@ 0x2c
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed2:	e179      	b.n	80011c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 8168 	bne.w	80011c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4a96      	ldr	r2, [pc, #600]	@ (8001150 <HAL_GPIO_Init+0x290>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d05e      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000efc:	4a94      	ldr	r2, [pc, #592]	@ (8001150 <HAL_GPIO_Init+0x290>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d875      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f02:	4a94      	ldr	r2, [pc, #592]	@ (8001154 <HAL_GPIO_Init+0x294>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d058      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f08:	4a92      	ldr	r2, [pc, #584]	@ (8001154 <HAL_GPIO_Init+0x294>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d86f      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f0e:	4a92      	ldr	r2, [pc, #584]	@ (8001158 <HAL_GPIO_Init+0x298>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d052      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f14:	4a90      	ldr	r2, [pc, #576]	@ (8001158 <HAL_GPIO_Init+0x298>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d869      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f1a:	4a90      	ldr	r2, [pc, #576]	@ (800115c <HAL_GPIO_Init+0x29c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d04c      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f20:	4a8e      	ldr	r2, [pc, #568]	@ (800115c <HAL_GPIO_Init+0x29c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d863      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f26:	4a8e      	ldr	r2, [pc, #568]	@ (8001160 <HAL_GPIO_Init+0x2a0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d046      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f2c:	4a8c      	ldr	r2, [pc, #560]	@ (8001160 <HAL_GPIO_Init+0x2a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d85d      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d82a      	bhi.n	8000f8c <HAL_GPIO_Init+0xcc>
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d859      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f40 <HAL_GPIO_Init+0x80>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000fbb 	.word	0x08000fbb
 8000f44:	08000f95 	.word	0x08000f95
 8000f48:	08000fa7 	.word	0x08000fa7
 8000f4c:	08000fe9 	.word	0x08000fe9
 8000f50:	08000fef 	.word	0x08000fef
 8000f54:	08000fef 	.word	0x08000fef
 8000f58:	08000fef 	.word	0x08000fef
 8000f5c:	08000fef 	.word	0x08000fef
 8000f60:	08000fef 	.word	0x08000fef
 8000f64:	08000fef 	.word	0x08000fef
 8000f68:	08000fef 	.word	0x08000fef
 8000f6c:	08000fef 	.word	0x08000fef
 8000f70:	08000fef 	.word	0x08000fef
 8000f74:	08000fef 	.word	0x08000fef
 8000f78:	08000fef 	.word	0x08000fef
 8000f7c:	08000fef 	.word	0x08000fef
 8000f80:	08000fef 	.word	0x08000fef
 8000f84:	08000f9d 	.word	0x08000f9d
 8000f88:	08000fb1 	.word	0x08000fb1
 8000f8c:	4a75      	ldr	r2, [pc, #468]	@ (8001164 <HAL_GPIO_Init+0x2a4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f92:	e02c      	b.n	8000fee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e029      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	e024      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	3308      	adds	r3, #8
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e01f      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	330c      	adds	r3, #12
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	e01a      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e013      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	611a      	str	r2, [r3, #16]
          break;
 8000fda:	e009      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	615a      	str	r2, [r3, #20]
          break;
 8000fe6:	e003      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          break;
 8000fee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2bff      	cmp	r3, #255	@ 0xff
 8000ff4:	d801      	bhi.n	8000ffa <HAL_GPIO_Init+0x13a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	e001      	b.n	8000ffe <HAL_GPIO_Init+0x13e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2bff      	cmp	r3, #255	@ 0xff
 8001004:	d802      	bhi.n	800100c <HAL_GPIO_Init+0x14c>
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x152>
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	3b08      	subs	r3, #8
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	210f      	movs	r1, #15
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	401a      	ands	r2, r3
 8001024:	6a39      	ldr	r1, [r7, #32]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	431a      	orrs	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80c1 	beq.w	80011c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001040:	4b49      	ldr	r3, [pc, #292]	@ (8001168 <HAL_GPIO_Init+0x2a8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a48      	ldr	r2, [pc, #288]	@ (8001168 <HAL_GPIO_Init+0x2a8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b46      	ldr	r3, [pc, #280]	@ (8001168 <HAL_GPIO_Init+0x2a8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001058:	4a44      	ldr	r2, [pc, #272]	@ (800116c <HAL_GPIO_Init+0x2ac>)
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a3c      	ldr	r2, [pc, #240]	@ (8001170 <HAL_GPIO_Init+0x2b0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d01f      	beq.n	80010c4 <HAL_GPIO_Init+0x204>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a3b      	ldr	r2, [pc, #236]	@ (8001174 <HAL_GPIO_Init+0x2b4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d019      	beq.n	80010c0 <HAL_GPIO_Init+0x200>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a3a      	ldr	r2, [pc, #232]	@ (8001178 <HAL_GPIO_Init+0x2b8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d013      	beq.n	80010bc <HAL_GPIO_Init+0x1fc>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a39      	ldr	r2, [pc, #228]	@ (800117c <HAL_GPIO_Init+0x2bc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1f8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a38      	ldr	r2, [pc, #224]	@ (8001180 <HAL_GPIO_Init+0x2c0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1f4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a37      	ldr	r2, [pc, #220]	@ (8001184 <HAL_GPIO_Init+0x2c4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1f0>
 80010ac:	2305      	movs	r3, #5
 80010ae:	e00a      	b.n	80010c6 <HAL_GPIO_Init+0x206>
 80010b0:	2306      	movs	r3, #6
 80010b2:	e008      	b.n	80010c6 <HAL_GPIO_Init+0x206>
 80010b4:	2304      	movs	r3, #4
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x206>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e004      	b.n	80010c6 <HAL_GPIO_Init+0x206>
 80010bc:	2302      	movs	r3, #2
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0x206>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_GPIO_Init+0x206>
 80010c4:	2300      	movs	r3, #0
 80010c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c8:	f002 0203 	and.w	r2, r2, #3
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d6:	4925      	ldr	r1, [pc, #148]	@ (800116c <HAL_GPIO_Init+0x2ac>)
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	4924      	ldr	r1, [pc, #144]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	43db      	mvns	r3, r3
 8001106:	4920      	ldr	r1, [pc, #128]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001108:	4013      	ands	r3, r2
 800110a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	491a      	ldr	r1, [pc, #104]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	60cb      	str	r3, [r1, #12]
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	43db      	mvns	r3, r3
 800112e:	4916      	ldr	r1, [pc, #88]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001130:	4013      	ands	r3, r2
 8001132:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d025      	beq.n	800118c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4910      	ldr	r1, [pc, #64]	@ (8001188 <HAL_GPIO_Init+0x2c8>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
 800114c:	e025      	b.n	800119a <HAL_GPIO_Init+0x2da>
 800114e:	bf00      	nop
 8001150:	10320000 	.word	0x10320000
 8001154:	10310000 	.word	0x10310000
 8001158:	10220000 	.word	0x10220000
 800115c:	10210000 	.word	0x10210000
 8001160:	10120000 	.word	0x10120000
 8001164:	10110000 	.word	0x10110000
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	40010800 	.word	0x40010800
 8001174:	40010c00 	.word	0x40010c00
 8001178:	40011000 	.word	0x40011000
 800117c:	40011400 	.word	0x40011400
 8001180:	40011800 	.word	0x40011800
 8001184:	40011c00 	.word	0x40011c00
 8001188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	43db      	mvns	r3, r3
 8001194:	4913      	ldr	r1, [pc, #76]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 8001196:	4013      	ands	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	490e      	ldr	r1, [pc, #56]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
 80011b2:	e006      	b.n	80011c2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4909      	ldr	r1, [pc, #36]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 80011be:	4013      	ands	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	3301      	adds	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f ae7e 	bne.w	8000ed4 <HAL_GPIO_Init+0x14>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	372c      	adds	r7, #44	@ 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	611a      	str	r2, [r3, #16]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e272      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8087 	beq.w	8001346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001238:	4b92      	ldr	r3, [pc, #584]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b04      	cmp	r3, #4
 8001242:	d00c      	beq.n	800125e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001244:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d112      	bne.n	8001276 <HAL_RCC_OscConfig+0x5e>
 8001250:	4b8c      	ldr	r3, [pc, #560]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800125c:	d10b      	bne.n	8001276 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125e:	4b89      	ldr	r3, [pc, #548]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d06c      	beq.n	8001344 <HAL_RCC_OscConfig+0x12c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d168      	bne.n	8001344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e24c      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x76>
 8001280:	4b80      	ldr	r3, [pc, #512]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a7f      	ldr	r2, [pc, #508]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e02e      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x98>
 8001296:	4b7b      	ldr	r3, [pc, #492]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a7a      	ldr	r2, [pc, #488]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b78      	ldr	r3, [pc, #480]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a77      	ldr	r2, [pc, #476]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0xbc>
 80012ba:	4b72      	ldr	r3, [pc, #456]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a71      	ldr	r2, [pc, #452]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 80012d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b68      	ldr	r3, [pc, #416]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a67      	ldr	r2, [pc, #412]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff faae 	bl	8000854 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff faaa 	bl	8000854 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	@ 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e200      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5d      	ldr	r3, [pc, #372]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xe4>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fa9a 	bl	8000854 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fa96 	bl	8000854 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	@ 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1ec      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x10c>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	4b4c      	ldr	r3, [pc, #304]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135e:	4b49      	ldr	r3, [pc, #292]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x18c>
 800136a:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b43      	ldr	r3, [pc, #268]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x176>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c0      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4939      	ldr	r1, [pc, #228]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <HAL_RCC_OscConfig+0x270>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fa4f 	bl	8000854 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fa4b 	bl	8000854 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a1      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4927      	ldr	r1, [pc, #156]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <HAL_RCC_OscConfig+0x270>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa2e 	bl	8000854 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fa2a 	bl	8000854 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e180      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03a      	beq.n	800149c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d019      	beq.n	8001462 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_RCC_OscConfig+0x274>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fa0e 	bl	8000854 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fa0a 	bl	8000854 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e160      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 fa9c 	bl	8001998 <RCC_Delay>
 8001460:	e01c      	b.n	800149c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_RCC_OscConfig+0x274>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff f9f4 	bl	8000854 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff f9f0 	bl	8000854 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d908      	bls.n	8001490 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e146      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	42420000 	.word	0x42420000
 800148c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e9      	bne.n	8001470 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a6 	beq.w	80015f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b8b      	ldr	r3, [pc, #556]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10d      	bne.n	80014d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b88      	ldr	r3, [pc, #544]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a87      	ldr	r2, [pc, #540]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b85      	ldr	r3, [pc, #532]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b82      	ldr	r3, [pc, #520]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b7f      	ldr	r3, [pc, #508]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a7e      	ldr	r2, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff f9b1 	bl	8000854 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff f9ad 	bl	8000854 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b64      	cmp	r3, #100	@ 0x64
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e103      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4b75      	ldr	r3, [pc, #468]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x312>
 800151c:	4b6f      	ldr	r3, [pc, #444]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a6e      	ldr	r2, [pc, #440]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	e02d      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x334>
 8001532:	4b6a      	ldr	r3, [pc, #424]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a69      	ldr	r2, [pc, #420]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b67      	ldr	r3, [pc, #412]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a66      	ldr	r2, [pc, #408]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	e01c      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x356>
 8001554:	4b61      	ldr	r3, [pc, #388]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a60      	ldr	r2, [pc, #384]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	4b5e      	ldr	r3, [pc, #376]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a5d      	ldr	r2, [pc, #372]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800156e:	4b5b      	ldr	r3, [pc, #364]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a5a      	ldr	r2, [pc, #360]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	4b58      	ldr	r3, [pc, #352]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a57      	ldr	r2, [pc, #348]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d015      	beq.n	80015ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff f961 	bl	8000854 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff f95d 	bl	8000854 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0b1      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ee      	beq.n	8001596 <HAL_RCC_OscConfig+0x37e>
 80015b8:	e014      	b.n	80015e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f94b 	bl	8000854 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff f947 	bl	8000854 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e09b      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d105      	bne.n	80015f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ea:	4b3c      	ldr	r3, [pc, #240]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a3b      	ldr	r2, [pc, #236]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001600:	4b36      	ldr	r3, [pc, #216]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d061      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d146      	bne.n	80016a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff f91b 	bl	8000854 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff f917 	bl	8000854 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e06d      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001648:	d108      	bne.n	800165c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	4921      	ldr	r1, [pc, #132]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a19      	ldr	r1, [r3, #32]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166c:	430b      	orrs	r3, r1
 800166e:	491b      	ldr	r1, [pc, #108]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001674:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff f8eb 	bl	8000854 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff f8e7 	bl	8000854 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x46a>
 80016a0:	e035      	b.n	800170e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff f8d4 	bl	8000854 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff f8d0 	bl	8000854 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e026      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x498>
 80016ce:	e01e      	b.n	800170e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e019      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
 80016e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_OscConfig+0x500>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0d0      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b6a      	ldr	r3, [pc, #424]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d910      	bls.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b67      	ldr	r3, [pc, #412]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4965      	ldr	r1, [pc, #404]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800179a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d040      	beq.n	800183c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d115      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e073      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06b      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4936      	ldr	r1, [pc, #216]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff f822 	bl	8000854 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff f81e 	bl	8000854 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e053      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d210      	bcs.n	800186c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4922      	ldr	r1, [pc, #136]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1cc>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1d0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe ff80 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08001e34 	.word	0x08001e34
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x94>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x30>
 800191a:	2b08      	cmp	r3, #8
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x36>
 800191e:	e027      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001922:	613b      	str	r3, [r7, #16]
      break;
 8001924:	e027      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a17      	ldr	r2, [pc, #92]	@ (800198c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x94>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	0c5b      	lsrs	r3, r3, #17
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001952:	fb03 f202 	mul.w	r2, r3, r2
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e004      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	613b      	str	r3, [r7, #16]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001972:	613b      	str	r3, [r7, #16]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	693b      	ldr	r3, [r7, #16]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	08001e44 	.word	0x08001e44
 8001990:	08001e54 	.word	0x08001e54
 8001994:	003d0900 	.word	0x003d0900

08001998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <RCC_Delay+0x34>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <RCC_Delay+0x38>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0a5b      	lsrs	r3, r3, #9
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b4:	bf00      	nop
  }
  while (Delay --);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	60fa      	str	r2, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f9      	bne.n	80019b4 <RCC_Delay+0x1c>
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000000 	.word	0x20000000
 80019d0:	10624dd3 	.word	0x10624dd3

080019d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d07d      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	4b4c      	ldr	r3, [pc, #304]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	61d3      	str	r3, [r2, #28]
 8001a0c:	4b49      	ldr	r3, [pc, #292]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4b46      	ldr	r3, [pc, #280]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d118      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a28:	4b43      	ldr	r3, [pc, #268]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a42      	ldr	r2, [pc, #264]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a34:	f7fe ff0e 	bl	8000854 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	e008      	b.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3c:	f7fe ff0a 	bl	8000854 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	@ 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e06d      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a5a:	4b36      	ldr	r3, [pc, #216]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02e      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d027      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a78:	4b2e      	ldr	r3, [pc, #184]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a82:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a88:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a8e:	4a29      	ldr	r2, [pc, #164]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d014      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7fe fed9 	bl	8000854 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7fe fed5 	bl	8000854 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e036      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ee      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4917      	ldr	r1, [pc, #92]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	490b      	ldr	r1, [pc, #44]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4904      	ldr	r1, [pc, #16]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42420440 	.word	0x42420440

08001b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e041      	b.n	8001bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fd92 	bl	8000690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f000 f82e 	bl	8001be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a39      	ldr	r2, [pc, #228]	@ (8001cd8 <TIM_Base_SetConfig+0xf8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a38      	ldr	r2, [pc, #224]	@ (8001cdc <TIM_Base_SetConfig+0xfc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00f      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c06:	d00b      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a35      	ldr	r2, [pc, #212]	@ (8001ce0 <TIM_Base_SetConfig+0x100>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a34      	ldr	r2, [pc, #208]	@ (8001ce4 <TIM_Base_SetConfig+0x104>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d003      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <TIM_Base_SetConfig+0x108>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d108      	bne.n	8001c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a28      	ldr	r2, [pc, #160]	@ (8001cd8 <TIM_Base_SetConfig+0xf8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <TIM_Base_SetConfig+0x82>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a27      	ldr	r2, [pc, #156]	@ (8001cdc <TIM_Base_SetConfig+0xfc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00f      	beq.n	8001c62 <TIM_Base_SetConfig+0x82>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c48:	d00b      	beq.n	8001c62 <TIM_Base_SetConfig+0x82>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a24      	ldr	r2, [pc, #144]	@ (8001ce0 <TIM_Base_SetConfig+0x100>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <TIM_Base_SetConfig+0x82>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a23      	ldr	r2, [pc, #140]	@ (8001ce4 <TIM_Base_SetConfig+0x104>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d003      	beq.n	8001c62 <TIM_Base_SetConfig+0x82>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ce8 <TIM_Base_SetConfig+0x108>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d108      	bne.n	8001c74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <TIM_Base_SetConfig+0xf8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <TIM_Base_SetConfig+0xc8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cdc <TIM_Base_SetConfig+0xfc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d103      	bne.n	8001cb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f023 0201 	bic.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40013400 	.word	0x40013400
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40000c00 	.word	0x40000c00

08001cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e050      	b.n	8001da6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5a:	d00e      	beq.n	8001d7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10c      	bne.n	8001d94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	40012c00 	.word	0x40012c00
 8001db4:	40013400 	.word	0x40013400
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00

08001dc4 <memset>:
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4402      	add	r2, r0
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d100      	bne.n	8001dce <memset+0xa>
 8001dcc:	4770      	bx	lr
 8001dce:	f803 1b01 	strb.w	r1, [r3], #1
 8001dd2:	e7f9      	b.n	8001dc8 <memset+0x4>

08001dd4 <__libc_init_array>:
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	2600      	movs	r6, #0
 8001dd8:	4d0c      	ldr	r5, [pc, #48]	@ (8001e0c <__libc_init_array+0x38>)
 8001dda:	4c0d      	ldr	r4, [pc, #52]	@ (8001e10 <__libc_init_array+0x3c>)
 8001ddc:	1b64      	subs	r4, r4, r5
 8001dde:	10a4      	asrs	r4, r4, #2
 8001de0:	42a6      	cmp	r6, r4
 8001de2:	d109      	bne.n	8001df8 <__libc_init_array+0x24>
 8001de4:	f000 f81a 	bl	8001e1c <_init>
 8001de8:	2600      	movs	r6, #0
 8001dea:	4d0a      	ldr	r5, [pc, #40]	@ (8001e14 <__libc_init_array+0x40>)
 8001dec:	4c0a      	ldr	r4, [pc, #40]	@ (8001e18 <__libc_init_array+0x44>)
 8001dee:	1b64      	subs	r4, r4, r5
 8001df0:	10a4      	asrs	r4, r4, #2
 8001df2:	42a6      	cmp	r6, r4
 8001df4:	d105      	bne.n	8001e02 <__libc_init_array+0x2e>
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dfc:	4798      	blx	r3
 8001dfe:	3601      	adds	r6, #1
 8001e00:	e7ee      	b.n	8001de0 <__libc_init_array+0xc>
 8001e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e06:	4798      	blx	r3
 8001e08:	3601      	adds	r6, #1
 8001e0a:	e7f2      	b.n	8001df2 <__libc_init_array+0x1e>
 8001e0c:	08001e58 	.word	0x08001e58
 8001e10:	08001e58 	.word	0x08001e58
 8001e14:	08001e58 	.word	0x08001e58
 8001e18:	08001e5c 	.word	0x08001e5c

08001e1c <_init>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	bf00      	nop
 8001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e22:	bc08      	pop	{r3}
 8001e24:	469e      	mov	lr, r3
 8001e26:	4770      	bx	lr

08001e28 <_fini>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	bf00      	nop
 8001e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2e:	bc08      	pop	{r3}
 8001e30:	469e      	mov	lr, r3
 8001e32:	4770      	bx	lr
