
B60C0_LCDTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e04  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001fe8  08001fe8  00002fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002030  08002030  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002030  08002030  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002030  08002030  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002030  08002030  00003030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002034  08002034  00003034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002038  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08002044  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002044  000040ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c2e  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001897  00000000  00000000  0000cc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0000e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081a  00000000  00000000  0000ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001927b  00000000  00000000  0000f79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b939  00000000  00000000  00028a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000983bf  00000000  00000000  0003434e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc70d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b34  00000000  00000000  000cc750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000cf284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001fd0 	.word	0x08001fd0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001fd0 	.word	0x08001fd0

08000224 <init_lcd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_lcd(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800022e:	4820      	ldr	r0, [pc, #128]	@ (80002b0 <init_lcd+0x8c>)
 8000230:	f001 f8b4 	bl	800139c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800023a:	481d      	ldr	r0, [pc, #116]	@ (80002b0 <init_lcd+0x8c>)
 800023c:	f001 f8ae 	bl	800139c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000246:	481a      	ldr	r0, [pc, #104]	@ (80002b0 <init_lcd+0x8c>)
 8000248:	f001 f8a8 	bl	800139c <HAL_GPIO_WritePin>

  HAL_Delay(15);
 800024c:	200f      	movs	r0, #15
 800024e:	f000 fbe5 	bl	8000a1c <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000258:	4815      	ldr	r0, [pc, #84]	@ (80002b0 <init_lcd+0x8c>)
 800025a:	f001 f89f 	bl	800139c <HAL_GPIO_WritePin>

	GPIOC->ODR = ((LCD_INIT4B & 0x00F0) << 8) | (GPIOC->IDR & 0x0FFF);
 800025e:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <init_lcd+0x8c>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000266:	4a12      	ldr	r2, [pc, #72]	@ (80002b0 <init_lcd+0x8c>)
 8000268:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800026c:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000274:	480e      	ldr	r0, [pc, #56]	@ (80002b0 <init_lcd+0x8c>)
 8000276:	f001 f891 	bl	800139c <HAL_GPIO_WritePin>

	write_lcd_data(LCD_FCSET4B, LCD_CMD);
 800027a:	2100      	movs	r1, #0
 800027c:	2028      	movs	r0, #40	@ 0x28
 800027e:	f000 f819 	bl	80002b4 <write_lcd_data>
	write_lcd_data(LCD_FCSET4B, LCD_CMD);
 8000282:	2100      	movs	r1, #0
 8000284:	2028      	movs	r0, #40	@ 0x28
 8000286:	f000 f815 	bl	80002b4 <write_lcd_data>

	write_lcd_data(LCD_DISP_OFF, LCD_CMD);
 800028a:	2100      	movs	r1, #0
 800028c:	2008      	movs	r0, #8
 800028e:	f000 f811 	bl	80002b4 <write_lcd_data>

	write_lcd_data(LCD_CLAR, LCD_CMD);
 8000292:	2100      	movs	r1, #0
 8000294:	2001      	movs	r0, #1
 8000296:	f000 f80d 	bl	80002b4 <write_lcd_data>

	write_lcd_data(LCD_ENTSET, LCD_CMD);
 800029a:	2100      	movs	r1, #0
 800029c:	2006      	movs	r0, #6
 800029e:	f000 f809 	bl	80002b4 <write_lcd_data>

	write_lcd_data(LCD_DISP_CUR, LCD_CMD);
 80002a2:	2100      	movs	r1, #0
 80002a4:	200e      	movs	r0, #14
 80002a6:	f000 f805 	bl	80002b4 <write_lcd_data>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40011000 	.word	0x40011000

080002b4 <write_lcd_data>:

void write_lcd_data(uint8_t data, uint8_t rs)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	460a      	mov	r2, r1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	71bb      	strb	r3, [r7, #6]

	uint16_t upper_data; // „É?„Éº„Çø„Ç≥„Éº„Éâ‰∏ä‰Ω?4„Éì„ÉÉ„ÉàÊ?ºÁ¥çÂ§âÊï∞
	uint16_t lower_data; // „É?„Éº„Çø„Ç≥„Éº„Éâ‰∏ã‰Ω?4„Éì„ÉÉ„ÉàÊ?ºÁ¥çÂ§âÊï∞

	upper_data = data * 0x0100 & 0xF000; // „É?„Éº„Çø„Ç≥„Éº„Éâ‰∏ä‰Ω?4„Éì„ÉÉ„Éà„ÇíÊäΩÂá∫
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	021b      	lsls	r3, r3, #8
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80002d0:	f023 030f 	bic.w	r3, r3, #15
 80002d4:	81fb      	strh	r3, [r7, #14]
	lower_data = data * 0x1000 & 0xF000; // „É?„Éº„Çø„Ç≥„Éº„Éâ‰∏ã‰Ω?4„Éì„ÉÉ„Éà„ÇíÊäΩÂá∫
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	031b      	lsls	r3, r3, #12
 80002dc:	81bb      	strh	r3, [r7, #12]

	HAL_Delay(10);
 80002de:	200a      	movs	r0, #10
 80002e0:	f000 fb9c 	bl	8000a1c <HAL_Delay>

	// „É¢„Éº„Éâ„?ÆÂà?„ÇäÊõø„ÅàÔºà„Éá„Éº„ÇøËª¢ÈÄÅ„Åã„Ç≥„Éû„É≥„Éâ„Åã?º?
	if (rs) {
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d006      	beq.n	80002f8 <write_lcd_data+0x44>
		HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002f0:	481d      	ldr	r0, [pc, #116]	@ (8000368 <write_lcd_data+0xb4>)
 80002f2:	f001 f853 	bl	800139c <HAL_GPIO_WritePin>
 80002f6:	e005      	b.n	8000304 <write_lcd_data+0x50>
	} else {
		HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002fe:	481a      	ldr	r0, [pc, #104]	@ (8000368 <write_lcd_data+0xb4>)
 8000300:	f001 f84c 	bl	800139c <HAL_GPIO_WritePin>
	}


	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800030a:	4817      	ldr	r0, [pc, #92]	@ (8000368 <write_lcd_data+0xb4>)
 800030c:	f001 f846 	bl	800139c <HAL_GPIO_WritePin>

	// „É?„Éº„Çø„Ç≥„Éº„Éâ‰∏ä‰Ω?4„Éì„ÉÉ„Éà„ÇíLCD„Å∏Êõ∏„ÅçËæº„Ç?
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000316:	4814      	ldr	r0, [pc, #80]	@ (8000368 <write_lcd_data+0xb4>)
 8000318:	f001 f840 	bl	800139c <HAL_GPIO_WritePin>
	GPIOC->ODR = upper_data | (GPIOC->IDR & 0x0FFF);
 800031c:	89fa      	ldrh	r2, [r7, #14]
 800031e:	4b12      	ldr	r3, [pc, #72]	@ (8000368 <write_lcd_data+0xb4>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000326:	4910      	ldr	r1, [pc, #64]	@ (8000368 <write_lcd_data+0xb4>)
 8000328:	4313      	orrs	r3, r2
 800032a:	60cb      	str	r3, [r1, #12]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000332:	480d      	ldr	r0, [pc, #52]	@ (8000368 <write_lcd_data+0xb4>)
 8000334:	f001 f832 	bl	800139c <HAL_GPIO_WritePin>

	// „É?„Éº„Çø„Ç≥„Éº„Éâ‰∏ã‰Ω?4„Éì„ÉÉ„Éà„ÇíLCD„Å∏Êõ∏„ÅçËæº„Ç?
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800033e:	480a      	ldr	r0, [pc, #40]	@ (8000368 <write_lcd_data+0xb4>)
 8000340:	f001 f82c 	bl	800139c <HAL_GPIO_WritePin>
	GPIOC->ODR = lower_data | (GPIOC->IDR & 0x0FFF);
 8000344:	89ba      	ldrh	r2, [r7, #12]
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <write_lcd_data+0xb4>)
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800034e:	4906      	ldr	r1, [pc, #24]	@ (8000368 <write_lcd_data+0xb4>)
 8000350:	4313      	orrs	r3, r2
 8000352:	60cb      	str	r3, [r1, #12]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800035a:	4803      	ldr	r0, [pc, #12]	@ (8000368 <write_lcd_data+0xb4>)
 800035c:	f001 f81e 	bl	800139c <HAL_GPIO_WritePin>
}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40011000 	.word	0x40011000

0800036c <lcd_puts>:
//-------------------------------------------------------

void lcd_puts(uint8_t *str)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	// Êñ?Â≠óÂ?óË°®Á§∫Èñ¢Êï∞
	// (Êñ?Â≠óÂ?ó„ÇíLCD„Å´Ë°®Á§∫„Åï„Åõ„Ç?)

	while(*str) {
 8000374:	e008      	b.n	8000388 <lcd_puts+0x1c>
		write_lcd_data(*str, LCD_DAT); // Êñ?Â≠ó„ÇíÈ†?Ê¨°Ë°®Á§∫
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2101      	movs	r1, #1
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff99 	bl	80002b4 <write_lcd_data>
		str++;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3301      	adds	r3, #1
 8000386:	607b      	str	r3, [r7, #4]
	while(*str) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d1f2      	bne.n	8000376 <lcd_puts+0xa>
	}
}
 8000390:	bf00      	nop
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <lcd_xy>:
//-------------------------------------------------------

void lcd_xy(uint8_t x, uint8_t y)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b084      	sub	sp, #16
 800039e:	af00      	add	r7, sp, #0
 80003a0:	4603      	mov	r3, r0
 80003a2:	460a      	mov	r2, r1
 80003a4:	71fb      	strb	r3, [r7, #7]
 80003a6:	4613      	mov	r3, r2
 80003a8:	71bb      	strb	r3, [r7, #6]
	// LCD Ë°®Á§∫‰ΩçÁΩÆ„ÇíË®≠ÂÆö„Åô„ÇãÈñ¢Êï∞
	// Ê°?(x=1„Ä?16)?ºåË°?(y=1,2?ºâ„?ÆÁØ?Âõ≤

	uint8_t adr; //Âûã„ÇíÊ≤ª„Å?
	adr=((x-1)+(y-1)*0x40) | 0x80; // „Ç¢„Éâ„É¨„Çπ„ÅÆÁÆóÂ?∫
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	3b01      	subs	r3, #1
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	019b      	lsls	r3, r3, #6
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4413      	add	r3, r2
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	3b01      	subs	r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003c4:	b25b      	sxtb	r3, r3
 80003c6:	73fb      	strb	r3, [r7, #15]
	write_lcd_data(adr, LCD_CMD);  // „Ç¢„Éâ„É¨„Çπ„ÅÆÊõ∏„ÅçËæº„Åø
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	2100      	movs	r1, #0
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff71 	bl	80002b4 <write_lcd_data>
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f000 faba 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f822 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f000 f928 	bl	800063c <MX_GPIO_Init>
  MX_ADC1_Init();
 80003ec:	f000 f87c 	bl	80004e8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80003f0:	f000 f8b8 	bl	8000564 <MX_TIM6_Init>
  MX_TIM7_Init();
 80003f4:	f000 f8ec 	bl	80005d0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  init_lcd();      // LCD„ÅÆ„Ç§„Éã„Ç∑„É£„É©„Ç§„Ç∫
 80003f8:	f7ff ff14 	bl	8000224 <init_lcd>

  write_lcd_data(LCD_CLAR, LCD_CMD); // Ë°®Á§∫„ÅÆ„ÇØ„É™„Ç¢ÂëΩ‰ª§
 80003fc:	2100      	movs	r1, #0
 80003fe:	2001      	movs	r0, #1
 8000400:	f7ff ff58 	bl	80002b4 <write_lcd_data>

  lcd_xy(1,1);                  // 1Ë°?1Ê°ÅÁõÆ„Å´ÁßªÂã?
 8000404:	2101      	movs	r1, #1
 8000406:	2001      	movs	r0, #1
 8000408:	f7ff ffc7 	bl	800039a <lcd_xy>
  lcd_puts("This is test!");       // 1Ë°åÁõÆ„ÇíË°®Á§∫
 800040c:	4805      	ldr	r0, [pc, #20]	@ (8000424 <main+0x48>)
 800040e:	f7ff ffad 	bl	800036c <lcd_puts>
  lcd_xy(1,2);                  // 2Ë°?1Ê°ÅÁõÆ„Å´ÁßªÂã?
 8000412:	2102      	movs	r1, #2
 8000414:	2001      	movs	r0, #1
 8000416:	f7ff ffc0 	bl	800039a <lcd_xy>
  lcd_puts("0123456789ABCDEF"); // 2Ë°åÁõÆ„ÇíË°®Á§∫
 800041a:	4803      	ldr	r0, [pc, #12]	@ (8000428 <main+0x4c>)
 800041c:	f7ff ffa6 	bl	800036c <lcd_puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <main+0x44>
 8000424:	08001fe8 	.word	0x08001fe8
 8000428:	08001ff8 	.word	0x08001ff8

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b096      	sub	sp, #88	@ 0x58
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000436:	2228      	movs	r2, #40	@ 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fd9c 	bl	8001f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]
 800045e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000460:	2301      	movs	r3, #1
 8000462:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000464:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000468:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046e:	2301      	movs	r3, #1
 8000470:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000472:	2302      	movs	r3, #2
 8000474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000476:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800047a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800047c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000480:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000486:	4618      	mov	r0, r3
 8000488:	f000 ffa0 	bl	80013cc <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000492:	f000 f963 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	2302      	movs	r3, #2
 800049c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ac:	f107 031c 	add.w	r3, r7, #28
 80004b0:	2102      	movs	r1, #2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fa0c 	bl	80018d0 <HAL_RCC_ClockConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004be:	f000 f94d 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004c2:	2302      	movs	r3, #2
 80004c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fb5a 	bl	8001b88 <HAL_RCCEx_PeriphCLKConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004da:	f000 f93f 	bl	800075c <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3758      	adds	r7, #88	@ 0x58
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f8:	4b18      	ldr	r3, [pc, #96]	@ (800055c <MX_ADC1_Init+0x74>)
 80004fa:	4a19      	ldr	r2, [pc, #100]	@ (8000560 <MX_ADC1_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fe:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	@ (800055c <MX_ADC1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b12      	ldr	r3, [pc, #72]	@ (800055c <MX_ADC1_Init+0x74>)
 8000512:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000518:	4b10      	ldr	r3, [pc, #64]	@ (800055c <MX_ADC1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x74>)
 8000520:	2201      	movs	r2, #1
 8000522:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <MX_ADC1_Init+0x74>)
 8000526:	f000 fa9d 	bl	8000a64 <HAL_ADC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000530:	f000 f914 	bl	800075c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000538:	2301      	movs	r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <MX_ADC1_Init+0x74>)
 8000546:	f000 fb77 	bl	8000c38 <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000550:	f000 f904 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000028 	.word	0x20000028
 8000560:	40012400 	.word	0x40012400

08000564 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056a:	463b      	mov	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_TIM6_Init+0x64>)
 8000574:	4a15      	ldr	r2, [pc, #84]	@ (80005cc <MX_TIM6_Init+0x68>)
 8000576:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <MX_TIM6_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_TIM6_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <MX_TIM6_Init+0x64>)
 8000586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800058a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <MX_TIM6_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000592:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <MX_TIM6_Init+0x64>)
 8000594:	f001 fbae 	bl	8001cf4 <HAL_TIM_Base_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800059e:	f000 f8dd 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <MX_TIM6_Init+0x64>)
 80005b0:	f001 fc76 	bl	8001ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80005ba:	f000 f8cf 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000058 	.word	0x20000058
 80005cc:	40001000 	.word	0x40001000

080005d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_TIM7_Init+0x64>)
 80005e0:	4a15      	ldr	r2, [pc, #84]	@ (8000638 <MX_TIM7_Init+0x68>)
 80005e2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_TIM7_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_TIM7_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80005f0:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <MX_TIM7_Init+0x64>)
 80005f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_TIM7_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80005fe:	480d      	ldr	r0, [pc, #52]	@ (8000634 <MX_TIM7_Init+0x64>)
 8000600:	f001 fb78 	bl	8001cf4 <HAL_TIM_Base_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800060a:	f000 f8a7 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	@ (8000634 <MX_TIM7_Init+0x64>)
 800061c:	f001 fc40 	bl	8001ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000626:	f000 f899 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000a0 	.word	0x200000a0
 8000638:	40001400 	.word	0x40001400

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000650:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <MX_GPIO_Init+0x110>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a3d      	ldr	r2, [pc, #244]	@ (800074c <MX_GPIO_Init+0x110>)
 8000656:	f043 0310 	orr.w	r3, r3, #16
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b3b      	ldr	r3, [pc, #236]	@ (800074c <MX_GPIO_Init+0x110>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0310 	and.w	r3, r3, #16
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000668:	4b38      	ldr	r3, [pc, #224]	@ (800074c <MX_GPIO_Init+0x110>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a37      	ldr	r2, [pc, #220]	@ (800074c <MX_GPIO_Init+0x110>)
 800066e:	f043 0320 	orr.w	r3, r3, #32
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b35      	ldr	r3, [pc, #212]	@ (800074c <MX_GPIO_Init+0x110>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0320 	and.w	r3, r3, #32
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <MX_GPIO_Init+0x110>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a31      	ldr	r2, [pc, #196]	@ (800074c <MX_GPIO_Init+0x110>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <MX_GPIO_Init+0x110>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <MX_GPIO_Init+0x110>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <MX_GPIO_Init+0x110>)
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <MX_GPIO_Init+0x110>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0308 	and.w	r3, r3, #8
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin|Buzzer_Pin
 80006b0:	2200      	movs	r2, #0
 80006b2:	f24f 71f0 	movw	r1, #63472	@ 0xf7f0
 80006b6:	4826      	ldr	r0, [pc, #152]	@ (8000750 <MX_GPIO_Init+0x114>)
 80006b8:	f000 fe70 	bl	800139c <HAL_GPIO_WritePin>
                          |LED9_CLK_Pin|LED9_DATA_Pin|LED9_SCAN_Pin|LCD_RS_Pin
                          |LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80006c2:	4824      	ldr	r0, [pc, #144]	@ (8000754 <MX_GPIO_Init+0x118>)
 80006c4:	f000 fe6a 	bl	800139c <HAL_GPIO_WritePin>
                          |LED7_Pin|LED8_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2104      	movs	r1, #4
 80006cc:	4822      	ldr	r0, [pc, #136]	@ (8000758 <MX_GPIO_Init+0x11c>)
 80006ce:	f000 fe65 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin Buzzer_Pin
                           LED9_CLK_Pin LED9_DATA_Pin LED9_SCAN_Pin LCD_RS_Pin
                           LCD_RW_Pin LCD_E_Pin LCD_DB4_Pin */
  GPIO_InitStruct.Pin = LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin|Buzzer_Pin
 80006d2:	f24f 73f0 	movw	r3, #63472	@ 0xf7f0
 80006d6:	613b      	str	r3, [r7, #16]
                          |LED9_CLK_Pin|LED9_DATA_Pin|LED9_SCAN_Pin|LCD_RS_Pin
                          |LCD_RW_Pin|LCD_E_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4819      	ldr	r0, [pc, #100]	@ (8000750 <MX_GPIO_Init+0x114>)
 80006ec:	f000 fcc2 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin SW6_Pin SW7_Pin SW8_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 80006f0:	23ff      	movs	r3, #255	@ 0xff
 80006f2:	613b      	str	r3, [r7, #16]
                          |SW5_Pin|SW6_Pin|SW7_Pin|SW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4814      	ldr	r0, [pc, #80]	@ (8000754 <MX_GPIO_Init+0x118>)
 8000704:	f000 fcb6 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin LED6_Pin
                           LED7_Pin LED8_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 8000708:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800070c:	613b      	str	r3, [r7, #16]
                          |LED7_Pin|LED8_Pin|LED1_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <MX_GPIO_Init+0x118>)
 8000722:	f000 fca7 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000726:	2304      	movs	r3, #4
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_GPIO_Init+0x11c>)
 800073e:	f000 fc99 	bl	8001074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000742:	bf00      	nop
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	40011000 	.word	0x40011000
 8000754:	40010c00 	.word	0x40010c00
 8000758:	40011400 	.word	0x40011400

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <HAL_ADC_MspInit+0x6c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d121      	bne.n	8000830 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <HAL_ADC_MspInit+0x70>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a12      	ldr	r2, [pc, #72]	@ (800083c <HAL_ADC_MspInit+0x70>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <HAL_ADC_MspInit+0x70>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <HAL_ADC_MspInit+0x70>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <HAL_ADC_MspInit+0x70>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_ADC_MspInit+0x70>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800081c:	2307      	movs	r3, #7
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000820:	2303      	movs	r3, #3
 8000822:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <HAL_ADC_MspInit+0x74>)
 800082c:	f000 fc22 	bl	8001074 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40012400 	.word	0x40012400
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800

08000844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a12      	ldr	r2, [pc, #72]	@ (800089c <HAL_TIM_Base_MspInit+0x58>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d10c      	bne.n	8000870 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_TIM_Base_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <HAL_TIM_Base_MspInit+0x5c>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_TIM_Base_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800086e:	e010      	b.n	8000892 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0b      	ldr	r2, [pc, #44]	@ (80008a4 <HAL_TIM_Base_MspInit+0x60>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10b      	bne.n	8000892 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_TIM_Base_MspInit+0x5c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_TIM_Base_MspInit+0x5c>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_TIM_Base_MspInit+0x5c>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40001000 	.word	0x40001000
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40001400 	.word	0x40001400

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <UsageFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f874 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800090c:	f7ff fff8 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480b      	ldr	r0, [pc, #44]	@ (8000940 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000912:	490c      	ldr	r1, [pc, #48]	@ (8000944 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000914:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a09      	ldr	r2, [pc, #36]	@ (800094c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000928:	4c09      	ldr	r4, [pc, #36]	@ (8000950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f001 fb27 	bl	8001f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fd4f 	bl	80003dc <main>
  bx lr
 800093e:	4770      	bx	lr
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000948:	08002038 	.word	0x08002038
  ldr r2, =_sbss
 800094c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000950:	200000ec 	.word	0x200000ec

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_Init+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <HAL_Init+0x28>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 fb4f 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f808 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff fef8 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_InitTick+0x54>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_InitTick+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fb59 	bl	800105a <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00e      	b.n	80009d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d80a      	bhi.n	80009ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f000 fb2f 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <HAL_InitTick+0x5c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a03      	ldr	r2, [pc, #12]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200000e8 	.word	0x200000e8

08000a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	@ (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	200000e8 	.word	0x200000e8

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff fff0 	bl	8000a08 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffe0 	bl	8000a08 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008

08000a64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e0ce      	b.n	8000c24 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fe92 	bl	80007cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f9bd 	bl	8000e28 <ADC_ConversionStop_Disable>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 80a9 	bne.w	8000c12 <HAL_ADC_Init+0x1ae>
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 80a5 	bne.w	8000c12 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000acc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ad0:	f023 0302 	bic.w	r3, r3, #2
 8000ad4:	f043 0202 	orr.w	r2, r3, #2
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4951      	ldr	r1, [pc, #324]	@ (8000c2c <HAL_ADC_Init+0x1c8>)
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d10a      	bne.n	8000b00 <HAL_ADC_Init+0x9c>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8000af2:	d002      	beq.n	8000afa <HAL_ADC_Init+0x96>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	e004      	b.n	8000b04 <HAL_ADC_Init+0xa0>
 8000afa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000afe:	e001      	b.n	8000b04 <HAL_ADC_Init+0xa0>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7b1b      	ldrb	r3, [r3, #12]
 8000b0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b1c:	d003      	beq.n	8000b26 <HAL_ADC_Init+0xc2>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d102      	bne.n	8000b2c <HAL_ADC_Init+0xc8>
 8000b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b2a:	e000      	b.n	8000b2e <HAL_ADC_Init+0xca>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7d1b      	ldrb	r3, [r3, #20]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d119      	bne.n	8000b70 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7b1b      	ldrb	r3, [r3, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d109      	bne.n	8000b58 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	035a      	lsls	r2, r3, #13
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	e00b      	b.n	8000b70 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5c:	f043 0220 	orr.w	r2, r3, #32
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	f043 0201 	orr.w	r2, r3, #1
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	430a      	orrs	r2, r1
 8000b82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <HAL_ADC_Init+0x1cc>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	68b9      	ldr	r1, [r7, #8]
 8000b94:	430b      	orrs	r3, r1
 8000b96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ba0:	d003      	beq.n	8000baa <HAL_ADC_Init+0x146>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d104      	bne.n	8000bb4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	051b      	lsls	r3, r3, #20
 8000bb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_ADC_Init+0x1d0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d10b      	bne.n	8000bf0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be2:	f023 0303 	bic.w	r3, r3, #3
 8000be6:	f043 0201 	orr.w	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bee:	e018      	b.n	8000c22 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf4:	f023 0312 	bic.w	r3, r3, #18
 8000bf8:	f043 0210 	orr.w	r2, r3, #16
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c04:	f043 0201 	orr.w	r2, r3, #1
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c10:	e007      	b.n	8000c22 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c16:	f043 0210 	orr.w	r2, r3, #16
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013c00 	.word	0x40013c00
 8000c30:	ffe1f7fd 	.word	0xffe1f7fd
 8000c34:	ff1f0efe 	.word	0xff1f0efe

08000c38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <HAL_ADC_ConfigChannel+0x20>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e0dc      	b.n	8000e12 <HAL_ADC_ConfigChannel+0x1da>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d81c      	bhi.n	8000ca2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	3b05      	subs	r3, #5
 8000c7a:	221f      	movs	r2, #31
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4019      	ands	r1, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	3b05      	subs	r3, #5
 8000c94:	fa00 f203 	lsl.w	r2, r0, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ca0:	e03c      	b.n	8000d1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b0c      	cmp	r3, #12
 8000ca8:	d81c      	bhi.n	8000ce4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	3b23      	subs	r3, #35	@ 0x23
 8000cbc:	221f      	movs	r2, #31
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4019      	ands	r1, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	3b23      	subs	r3, #35	@ 0x23
 8000cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ce2:	e01b      	b.n	8000d1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3b41      	subs	r3, #65	@ 0x41
 8000cf6:	221f      	movs	r2, #31
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4019      	ands	r1, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3b41      	subs	r3, #65	@ 0x41
 8000d10:	fa00 f203 	lsl.w	r2, r0, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b09      	cmp	r3, #9
 8000d22:	d91c      	bls.n	8000d5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68d9      	ldr	r1, [r3, #12]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	3b1e      	subs	r3, #30
 8000d36:	2207      	movs	r2, #7
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4019      	ands	r1, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6898      	ldr	r0, [r3, #8]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3b1e      	subs	r3, #30
 8000d50:	fa00 f203 	lsl.w	r2, r0, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	e019      	b.n	8000d92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6919      	ldr	r1, [r3, #16]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2207      	movs	r2, #7
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4019      	ands	r1, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	6898      	ldr	r0, [r3, #8]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	fa00 f203 	lsl.w	r2, r0, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b10      	cmp	r3, #16
 8000d98:	d003      	beq.n	8000da2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d9e:	2b11      	cmp	r3, #17
 8000da0:	d132      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <HAL_ADC_ConfigChannel+0x1e4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d125      	bne.n	8000df8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d126      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000dc8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d11a      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_ADC_ConfigChannel+0x1e8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a13      	ldr	r2, [pc, #76]	@ (8000e24 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9a      	lsrs	r2, r3, #18
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000de8:	e002      	b.n	8000df0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f9      	bne.n	8000dea <HAL_ADC_ConfigChannel+0x1b2>
 8000df6:	e007      	b.n	8000e08 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfc:	f043 0220 	orr.w	r2, r3, #32
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40012400 	.word	0x40012400
 8000e20:	20000000 	.word	0x20000000
 8000e24:	431bde83 	.word	0x431bde83

08000e28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d12e      	bne.n	8000ea0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e52:	f7ff fdd9 	bl	8000a08 <HAL_GetTick>
 8000e56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e58:	e01b      	b.n	8000e92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e5a:	f7ff fdd5 	bl	8000a08 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d914      	bls.n	8000e92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10d      	bne.n	8000e92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e7a:	f043 0210 	orr.w	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e007      	b.n	8000ea2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d0dc      	beq.n	8000e5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	@ (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff90 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff49 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff90 	bl	8000f64 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5f 	bl	8000f10 <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b08b      	sub	sp, #44	@ 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e179      	b.n	800137c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001088:	2201      	movs	r2, #1
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8168 	bne.w	8001376 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a96      	ldr	r2, [pc, #600]	@ (8001304 <HAL_GPIO_Init+0x290>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d05e      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010b0:	4a94      	ldr	r2, [pc, #592]	@ (8001304 <HAL_GPIO_Init+0x290>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d875      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010b6:	4a94      	ldr	r2, [pc, #592]	@ (8001308 <HAL_GPIO_Init+0x294>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d058      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010bc:	4a92      	ldr	r2, [pc, #584]	@ (8001308 <HAL_GPIO_Init+0x294>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d86f      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010c2:	4a92      	ldr	r2, [pc, #584]	@ (800130c <HAL_GPIO_Init+0x298>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d052      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010c8:	4a90      	ldr	r2, [pc, #576]	@ (800130c <HAL_GPIO_Init+0x298>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d869      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ce:	4a90      	ldr	r2, [pc, #576]	@ (8001310 <HAL_GPIO_Init+0x29c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d04c      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010d4:	4a8e      	ldr	r2, [pc, #568]	@ (8001310 <HAL_GPIO_Init+0x29c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d863      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010da:	4a8e      	ldr	r2, [pc, #568]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d046      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010e0:	4a8c      	ldr	r2, [pc, #560]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d85d      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d82a      	bhi.n	8001140 <HAL_GPIO_Init+0xcc>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d859      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ee:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <HAL_GPIO_Init+0x80>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800116f 	.word	0x0800116f
 80010f8:	08001149 	.word	0x08001149
 80010fc:	0800115b 	.word	0x0800115b
 8001100:	0800119d 	.word	0x0800119d
 8001104:	080011a3 	.word	0x080011a3
 8001108:	080011a3 	.word	0x080011a3
 800110c:	080011a3 	.word	0x080011a3
 8001110:	080011a3 	.word	0x080011a3
 8001114:	080011a3 	.word	0x080011a3
 8001118:	080011a3 	.word	0x080011a3
 800111c:	080011a3 	.word	0x080011a3
 8001120:	080011a3 	.word	0x080011a3
 8001124:	080011a3 	.word	0x080011a3
 8001128:	080011a3 	.word	0x080011a3
 800112c:	080011a3 	.word	0x080011a3
 8001130:	080011a3 	.word	0x080011a3
 8001134:	080011a3 	.word	0x080011a3
 8001138:	08001151 	.word	0x08001151
 800113c:	08001165 	.word	0x08001165
 8001140:	4a75      	ldr	r2, [pc, #468]	@ (8001318 <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001146:	e02c      	b.n	80011a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e029      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	3304      	adds	r3, #4
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e024      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	3308      	adds	r3, #8
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e01f      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	330c      	adds	r3, #12
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e01a      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001176:	2304      	movs	r3, #4
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e013      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d105      	bne.n	8001190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	611a      	str	r2, [r3, #16]
          break;
 800118e:	e009      	b.n	80011a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	615a      	str	r2, [r3, #20]
          break;
 800119a:	e003      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          break;
 80011a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2bff      	cmp	r3, #255	@ 0xff
 80011a8:	d801      	bhi.n	80011ae <HAL_GPIO_Init+0x13a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e001      	b.n	80011b2 <HAL_GPIO_Init+0x13e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	@ 0xff
 80011b8:	d802      	bhi.n	80011c0 <HAL_GPIO_Init+0x14c>
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x152>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c2:	3b08      	subs	r3, #8
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	210f      	movs	r1, #15
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80c1 	beq.w	8001376 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f4:	4b49      	ldr	r3, [pc, #292]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a48      	ldr	r2, [pc, #288]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b46      	ldr	r3, [pc, #280]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800120c:	4a44      	ldr	r2, [pc, #272]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3c      	ldr	r2, [pc, #240]	@ (8001324 <HAL_GPIO_Init+0x2b0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d01f      	beq.n	8001278 <HAL_GPIO_Init+0x204>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3b      	ldr	r2, [pc, #236]	@ (8001328 <HAL_GPIO_Init+0x2b4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d019      	beq.n	8001274 <HAL_GPIO_Init+0x200>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3a      	ldr	r2, [pc, #232]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_GPIO_Init+0x1fc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a39      	ldr	r2, [pc, #228]	@ (8001330 <HAL_GPIO_Init+0x2bc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1f8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a38      	ldr	r2, [pc, #224]	@ (8001334 <HAL_GPIO_Init+0x2c0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1f4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a37      	ldr	r2, [pc, #220]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1f0>
 8001260:	2305      	movs	r3, #5
 8001262:	e00a      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001264:	2306      	movs	r3, #6
 8001266:	e008      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001268:	2304      	movs	r3, #4
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x206>
 800126c:	2303      	movs	r3, #3
 800126e:	e004      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001270:	2302      	movs	r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_GPIO_Init+0x206>
 8001278:	2300      	movs	r3, #0
 800127a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800127c:	f002 0203 	and.w	r2, r2, #3
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4093      	lsls	r3, r2
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800128a:	4925      	ldr	r1, [pc, #148]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	4924      	ldr	r1, [pc, #144]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4920      	ldr	r1, [pc, #128]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012bc:	4013      	ands	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	491a      	ldr	r1, [pc, #104]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60cb      	str	r3, [r1, #12]
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4916      	ldr	r1, [pc, #88]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d025      	beq.n	8001340 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4910      	ldr	r1, [pc, #64]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	e025      	b.n	800134e <HAL_GPIO_Init+0x2da>
 8001302:	bf00      	nop
 8001304:	10320000 	.word	0x10320000
 8001308:	10310000 	.word	0x10310000
 800130c:	10220000 	.word	0x10220000
 8001310:	10210000 	.word	0x10210000
 8001314:	10120000 	.word	0x10120000
 8001318:	10110000 	.word	0x10110000
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40011000 	.word	0x40011000
 8001330:	40011400 	.word	0x40011400
 8001334:	40011800 	.word	0x40011800
 8001338:	40011c00 	.word	0x40011c00
 800133c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_GPIO_Init+0x324>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	43db      	mvns	r3, r3
 8001348:	4913      	ldr	r1, [pc, #76]	@ (8001398 <HAL_GPIO_Init+0x324>)
 800134a:	4013      	ands	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_GPIO_Init+0x324>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	490e      	ldr	r1, [pc, #56]	@ (8001398 <HAL_GPIO_Init+0x324>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_GPIO_Init+0x324>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4909      	ldr	r1, [pc, #36]	@ (8001398 <HAL_GPIO_Init+0x324>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	f47f ae7e 	bne.w	8001088 <HAL_GPIO_Init+0x14>
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	372c      	adds	r7, #44	@ 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e272      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8087 	beq.w	80014fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ec:	4b92      	ldr	r3, [pc, #584]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d00c      	beq.n	8001412 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f8:	4b8f      	ldr	r3, [pc, #572]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d112      	bne.n	800142a <HAL_RCC_OscConfig+0x5e>
 8001404:	4b8c      	ldr	r3, [pc, #560]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001410:	d10b      	bne.n	800142a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001412:	4b89      	ldr	r3, [pc, #548]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d06c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x12c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d168      	bne.n	80014f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e24c      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x76>
 8001434:	4b80      	ldr	r3, [pc, #512]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a7f      	ldr	r2, [pc, #508]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800143a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e02e      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x98>
 800144a:	4b7b      	ldr	r3, [pc, #492]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7a      	ldr	r2, [pc, #488]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b78      	ldr	r3, [pc, #480]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a77      	ldr	r2, [pc, #476]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e01d      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0xbc>
 800146e:	4b72      	ldr	r3, [pc, #456]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a71      	ldr	r2, [pc, #452]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6f      	ldr	r3, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6e      	ldr	r2, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001488:	4b6b      	ldr	r3, [pc, #428]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a6a      	ldr	r2, [pc, #424]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b68      	ldr	r3, [pc, #416]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a67      	ldr	r2, [pc, #412]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff faae 	bl	8000a08 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff faaa 	bl	8000a08 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	@ 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e200      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe4>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fa9a 	bl	8000a08 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fa96 	bl	8000a08 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	@ 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1ec      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x10c>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d063      	beq.n	80015ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001506:	4b4c      	ldr	r3, [pc, #304]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001512:	4b49      	ldr	r3, [pc, #292]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d11c      	bne.n	8001558 <HAL_RCC_OscConfig+0x18c>
 800151e:	4b46      	ldr	r3, [pc, #280]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d116      	bne.n	8001558 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	4b43      	ldr	r3, [pc, #268]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_RCC_OscConfig+0x176>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1c0      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4939      	ldr	r1, [pc, #228]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	e03a      	b.n	80015ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001560:	4b36      	ldr	r3, [pc, #216]	@ (800163c <HAL_RCC_OscConfig+0x270>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fa4f 	bl	8000a08 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fa4b 	bl	8000a08 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e1a1      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4927      	ldr	r1, [pc, #156]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4b26      	ldr	r3, [pc, #152]	@ (800163c <HAL_RCC_OscConfig+0x270>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fa2e 	bl	8000a08 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fa2a 	bl	8000a08 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e180      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03a      	beq.n	8001650 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d019      	beq.n	8001616 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <HAL_RCC_OscConfig+0x274>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fa0e 	bl	8000a08 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fa0a 	bl	8000a08 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e160      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fa9c 	bl	8001b4c <RCC_Delay>
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_RCC_OscConfig+0x274>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f9f4 	bl	8000a08 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001622:	e00f      	b.n	8001644 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff f9f0 	bl	8000a08 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d908      	bls.n	8001644 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e146      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	42420000 	.word	0x42420000
 8001640:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b92      	ldr	r3, [pc, #584]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e9      	bne.n	8001624 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a6 	beq.w	80017aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b8b      	ldr	r3, [pc, #556]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a87      	ldr	r2, [pc, #540]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b85      	ldr	r3, [pc, #532]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b82      	ldr	r3, [pc, #520]	@ (8001894 <HAL_RCC_OscConfig+0x4c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x4c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7e      	ldr	r2, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x4c8>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f9b1 	bl	8000a08 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff f9ad 	bl	8000a08 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	@ 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e103      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x4c8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x312>
 80016d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e02d      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x334>
 80016e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a69      	ldr	r2, [pc, #420]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	4b67      	ldr	r3, [pc, #412]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a66      	ldr	r2, [pc, #408]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	e01c      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0x356>
 8001708:	4b61      	ldr	r3, [pc, #388]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	4b5e      	ldr	r3, [pc, #376]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a5d      	ldr	r2, [pc, #372]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 8001722:	4b5b      	ldr	r3, [pc, #364]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a5a      	ldr	r2, [pc, #360]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	4b58      	ldr	r3, [pc, #352]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a57      	ldr	r2, [pc, #348]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d015      	beq.n	800176e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff f961 	bl	8000a08 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f95d 	bl	8000a08 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0b1      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	4b4b      	ldr	r3, [pc, #300]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ee      	beq.n	800174a <HAL_RCC_OscConfig+0x37e>
 800176c:	e014      	b.n	8001798 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff f94b 	bl	8000a08 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff f947 	bl	8000a08 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e09b      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	4b40      	ldr	r3, [pc, #256]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ee      	bne.n	8001776 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d105      	bne.n	80017aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4b3c      	ldr	r3, [pc, #240]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8087 	beq.w	80018c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b4:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d061      	beq.n	8001884 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d146      	bne.n	8001856 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c8:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <HAL_RCC_OscConfig+0x4cc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff f91b 	bl	8000a08 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f917 	bl	8000a08 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e06d      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4921      	ldr	r1, [pc, #132]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001810:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a19      	ldr	r1, [r3, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	430b      	orrs	r3, r1
 8001822:	491b      	ldr	r1, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x4cc>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f8eb 	bl	8000a08 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f8e7 	bl	8000a08 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e03d      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x46a>
 8001854:	e035      	b.n	80018c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_RCC_OscConfig+0x4cc>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f8d4 	bl	8000a08 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f8d0 	bl	8000a08 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e026      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x498>
 8001882:	e01e      	b.n	80018c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e019      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
 8001890:	40021000 	.word	0x40021000
 8001894:	40007000 	.word	0x40007000
 8001898:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_RCC_OscConfig+0x500>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0d0      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d910      	bls.n	8001914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b67      	ldr	r3, [pc, #412]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0207 	bic.w	r2, r3, #7
 80018fa:	4965      	ldr	r1, [pc, #404]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0b8      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800192c:	4b59      	ldr	r3, [pc, #356]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a58      	ldr	r2, [pc, #352]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001936:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001944:	4b53      	ldr	r3, [pc, #332]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800194e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001950:	4b50      	ldr	r3, [pc, #320]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	494d      	ldr	r1, [pc, #308]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d040      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b47      	ldr	r3, [pc, #284]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d115      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e07f      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b41      	ldr	r3, [pc, #260]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e073      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06b      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b39      	ldr	r3, [pc, #228]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4936      	ldr	r1, [pc, #216]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7ff f822 	bl	8000a08 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7ff f81e 	bl	8000a08 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e053      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d210      	bcs.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 0207 	bic.w	r2, r3, #7
 8001a06:	4922      	ldr	r1, [pc, #136]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e032      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4916      	ldr	r1, [pc, #88]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	490e      	ldr	r1, [pc, #56]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5e:	f000 f821 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	490a      	ldr	r1, [pc, #40]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	5ccb      	ldrb	r3, [r1, r3]
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	4a09      	ldr	r2, [pc, #36]	@ (8001a9c <HAL_RCC_ClockConfig+0x1cc>)
 8001a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe ff80 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	0800200c 	.word	0x0800200c
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d002      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d003      	beq.n	8001ada <HAL_RCC_GetSysClockFreq+0x36>
 8001ad2:	e027      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ad6:	613b      	str	r3, [r7, #16]
      break;
 8001ad8:	e027      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	0c9b      	lsrs	r3, r3, #18
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d010      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	0c5b      	lsrs	r3, r3, #17
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b06:	fb03 f202 	mul.w	r2, r3, r2
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e004      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	613b      	str	r3, [r7, #16]
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b26:	613b      	str	r3, [r7, #16]
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	693b      	ldr	r3, [r7, #16]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	007a1200 	.word	0x007a1200
 8001b40:	0800201c 	.word	0x0800201c
 8001b44:	0800202c 	.word	0x0800202c
 8001b48:	003d0900 	.word	0x003d0900

08001b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b54:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <RCC_Delay+0x34>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <RCC_Delay+0x38>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0a5b      	lsrs	r3, r3, #9
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b68:	bf00      	nop
  }
  while (Delay --);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	60fa      	str	r2, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <RCC_Delay+0x1c>
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000000 	.word	0x20000000
 8001b84:	10624dd3 	.word	0x10624dd3

08001b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d07d      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	4b49      	ldr	r3, [pc, #292]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d118      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a42      	ldr	r2, [pc, #264]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be8:	f7fe ff0e 	bl	8000a08 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	e008      	b.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf0:	f7fe ff0a 	bl	8000a08 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e06d      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02e      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d027      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c36:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c42:	4a29      	ldr	r2, [pc, #164]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d014      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe fed9 	bl	8000a08 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fed5 	bl	8000a08 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e036      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ee      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4917      	ldr	r1, [pc, #92]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c94:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	490b      	ldr	r1, [pc, #44]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cca:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4904      	ldr	r1, [pc, #16]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	42420440 	.word	0x42420440

08001cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e041      	b.n	8001d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fd92 	bl	8000844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f000 f82e 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a39      	ldr	r2, [pc, #228]	@ (8001e8c <TIM_Base_SetConfig+0xf8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <TIM_Base_SetConfig+0x40>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a38      	ldr	r2, [pc, #224]	@ (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00f      	beq.n	8001dd4 <TIM_Base_SetConfig+0x40>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dba:	d00b      	beq.n	8001dd4 <TIM_Base_SetConfig+0x40>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a35      	ldr	r2, [pc, #212]	@ (8001e94 <TIM_Base_SetConfig+0x100>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <TIM_Base_SetConfig+0x40>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a34      	ldr	r2, [pc, #208]	@ (8001e98 <TIM_Base_SetConfig+0x104>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <TIM_Base_SetConfig+0x40>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a33      	ldr	r2, [pc, #204]	@ (8001e9c <TIM_Base_SetConfig+0x108>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d108      	bne.n	8001de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a28      	ldr	r2, [pc, #160]	@ (8001e8c <TIM_Base_SetConfig+0xf8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <TIM_Base_SetConfig+0x82>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00f      	beq.n	8001e16 <TIM_Base_SetConfig+0x82>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dfc:	d00b      	beq.n	8001e16 <TIM_Base_SetConfig+0x82>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a24      	ldr	r2, [pc, #144]	@ (8001e94 <TIM_Base_SetConfig+0x100>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <TIM_Base_SetConfig+0x82>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <TIM_Base_SetConfig+0x104>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <TIM_Base_SetConfig+0x82>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <TIM_Base_SetConfig+0x108>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d108      	bne.n	8001e28 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e8c <TIM_Base_SetConfig+0xf8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <TIM_Base_SetConfig+0xc8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0e      	ldr	r2, [pc, #56]	@ (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f023 0201 	bic.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]
  }
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40013400 	.word	0x40013400
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00

08001ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e050      	b.n	8001f5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0e:	d00e      	beq.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10c      	bne.n	8001f48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40013400 	.word	0x40013400
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800
 8001f74:	40000c00 	.word	0x40000c00

08001f78 <memset>:
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4402      	add	r2, r0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <memset+0xa>
 8001f80:	4770      	bx	lr
 8001f82:	f803 1b01 	strb.w	r1, [r3], #1
 8001f86:	e7f9      	b.n	8001f7c <memset+0x4>

08001f88 <__libc_init_array>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	4d0c      	ldr	r5, [pc, #48]	@ (8001fc0 <__libc_init_array+0x38>)
 8001f8e:	4c0d      	ldr	r4, [pc, #52]	@ (8001fc4 <__libc_init_array+0x3c>)
 8001f90:	1b64      	subs	r4, r4, r5
 8001f92:	10a4      	asrs	r4, r4, #2
 8001f94:	42a6      	cmp	r6, r4
 8001f96:	d109      	bne.n	8001fac <__libc_init_array+0x24>
 8001f98:	f000 f81a 	bl	8001fd0 <_init>
 8001f9c:	2600      	movs	r6, #0
 8001f9e:	4d0a      	ldr	r5, [pc, #40]	@ (8001fc8 <__libc_init_array+0x40>)
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <__libc_init_array+0x44>)
 8001fa2:	1b64      	subs	r4, r4, r5
 8001fa4:	10a4      	asrs	r4, r4, #2
 8001fa6:	42a6      	cmp	r6, r4
 8001fa8:	d105      	bne.n	8001fb6 <__libc_init_array+0x2e>
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb0:	4798      	blx	r3
 8001fb2:	3601      	adds	r6, #1
 8001fb4:	e7ee      	b.n	8001f94 <__libc_init_array+0xc>
 8001fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fba:	4798      	blx	r3
 8001fbc:	3601      	adds	r6, #1
 8001fbe:	e7f2      	b.n	8001fa6 <__libc_init_array+0x1e>
 8001fc0:	08002030 	.word	0x08002030
 8001fc4:	08002030 	.word	0x08002030
 8001fc8:	08002030 	.word	0x08002030
 8001fcc:	08002034 	.word	0x08002034

08001fd0 <_init>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	bf00      	nop
 8001fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd6:	bc08      	pop	{r3}
 8001fd8:	469e      	mov	lr, r3
 8001fda:	4770      	bx	lr

08001fdc <_fini>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr
